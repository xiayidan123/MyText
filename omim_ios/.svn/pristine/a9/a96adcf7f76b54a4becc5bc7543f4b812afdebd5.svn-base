//
//  ActivityDetailViewController.m
//  dev01
//
//  Created by jianxd on 13-7-4.
//  Copyright (c) 2013å¹´ wowtech. All rights reserved.
//

#import "ActivityDetailViewController.h"
#import "Constants.h"
#import "Activity.h"
#import "ImageScrollView.h"
#import "PublicFunctions.h"
#import "UISize.h"
#import "WowTalkWebServerIF.h"
#import "EventDate.h"
#import "JSONKit.h"
#import "WTError.h"
#import "Database.h"
#import "DatePickerView.h"
#import "Colors.h"

#define MARGIN_HORIZONTAL       16
#define MARGIN_VERTICAL         10
#define INNER_WIDTH             288

@interface ActivityDetailViewController ()
{
    BOOL hasChoosedDate;
}

@property (nonatomic) CGFloat offsetY;
@property (nonatomic) BOOL hasJoined;
@property (nonatomic) NSInteger choosedDate;
@property (copy, nonatomic) NSString *applyDetails;
@property (retain, nonatomic) DatePickerView *datePickerView;
@property (retain, nonatomic) UIAlertView *alertView;

@end

@implementation ActivityDetailViewController

@synthesize offsetY = _offsetY;
@synthesize hasJoined = _hasJoined;
@synthesize choosedDate = _choosedDate;
@synthesize applyDetails = _applyDetails;
@synthesize datePickerView = _datePickerView;
@synthesize alertView = _alertView;

@synthesize activity = _activity;
@synthesize mainScrollView = _mainScrollView;
@synthesize titleView = _titleView;
@synthesize titleLabel = _titleLabel;
@synthesize detailView = _detailView;
@synthesize timeLabel = _timeLabel;
@synthesize areaLabel = _areaLabel;
@synthesize classicLabel = _classicLabel;
@synthesize costLabel = _costLabel;
@synthesize voiceView = _voiceView;

@synthesize descriptionView = _descriptionView;
@synthesize descriptionTitleLabel = _descriptionTitleLabel;
@synthesize descriptionContentLabel = _descriptionContentLabel;

@synthesize signupInfoView = _signupInfoView;
@synthesize signupInputView = _signupInputView;
@synthesize phoneTitleLabel = _phoneTitleLabel;
@synthesize phoneContentLabel = _phoneContentLabel;

@synthesize signupView = _signupView;
@synthesize infoView = _infoView;
@synthesize infoTitleLabel = _infoTitleLabel;
@synthesize timeView = _timeView;
@synthesize chooseTimeTitle = _chooseTimeTitle;
@synthesize chooseTimeImageView = _chooseTimeImageView;
@synthesize choosedTimeLabel = _choosedTimeLabel;
@synthesize joinedNumberView = _joinedNumberView;
@synthesize joinedNumberTitleLabel = _joinedNumberTitleLabel;
@synthesize joinedNumberLabel = _joinedNumberLabel;

@synthesize signupButton = _signupButton;
@synthesize cancelButton = _cancelButton;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    hasChoosedDate = NO;
    self.mainScrollView.frame = CGRectMake(0, 0, 320, [UISize screenHeightNotIncludingStatusBarAndNavBar]);
    [self configNavigationBar];
    [self loadViewContent];
    UITapGestureRecognizer *tapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(didTapBackground:)];
    tapRecognizer.delegate = self;
    tapRecognizer.cancelsTouchesInView = NO;
    [self.mainScrollView addGestureRecognizer:tapRecognizer];
    [tapRecognizer release];
    if (IS_IOS7) {
        [self.view setAutoresizesSubviews:NO];
        [self.view setAutoresizingMask:UIViewAutoresizingNone];
        self.edgesForExtendedLayout = UIRectEdgeNone;
        self.automaticallyAdjustsScrollViewInsets = NO;
    }
}

- (void)viewWillAppear:(BOOL)animated
{
    self.mainScrollView.frame = CGRectMake(0, 0, 320, [UISize screenHeightNotIncludingStatusBarAndNavBar]);
    _choosedDate = 0;
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillShow:)
                                                 name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillHide:)
                                                 name:UIKeyboardWillHideNotification object:nil];
    [super viewWillAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillHideNotification object:nil];
    [super viewWillDisappear:animated];
}

# pragma mark config navigation bar
- (void)configNavigationBar
{
    UILabel *titleLabel = [[UILabel alloc] init];
    titleLabel.text = NSLocalizedString(@"Event Detail", nil);
    titleLabel.font = [UIFont fontWithName:@"Helvetica-Bold" size:20];
    titleLabel.textAlignment = NSTextAlignmentCenter;
    titleLabel.textColor = [UIColor whiteColor];
    titleLabel.backgroundColor = [UIColor clearColor];
    [titleLabel sizeToFit];
    self.navigationItem.titleView = titleLabel;
    [titleLabel release];
    
    UIBarButtonItem *backButtonItem = [PublicFunctions getCustomNavButtonOnLeftSide:YES target:self image:[UIImage imageNamed:NAV_BACK_IMAGE] selector:@selector(goBack)];
    [self.navigationItem addLeftBarButtonItem:backButtonItem];
    [backButtonItem release];
}

- (void)didTapBackground:(UIGestureRecognizer *)recognizer
{
    if (recognizer.state == UIGestureRecognizerStateEnded) {
        for (UIView *subView in [self.signupInputView subviews]) {
            if (subView.tag == 101) {
                for (UIView *view in [subView subviews]) {
                    [view resignFirstResponder];
                }
            }
        }
    }
}

- (void)goBack
{
    [self.navigationController popToRootViewControllerAnimated:YES];
}

- (void)loadViewContent
{
    _hasJoined = self.activity.memberJoinable;
    UITapGestureRecognizer *tapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(chooseDateButtonPressed)];
    tapRecognizer.numberOfTapsRequired = 1;
    [self.chooseTimeImageView addGestureRecognizer:tapRecognizer];
    [tapRecognizer release];
    // scroll view
    BOOL hasPhoto = [self.activity.mediaArray count] > 0;
    if (hasPhoto) {
        ImageScrollView *imageScrollView = [[ImageScrollView alloc] initWithFrame:CGRectMake(0, 0, 320, 200) imageWidth:320 imageArray:self.activity.mediaArray];
        [self.mainScrollView addSubview:imageScrollView];
        [imageScrollView release];
    }
    
    // title view
    //CGSize titleSize = [self.activity.title sizeWithFont:[UIFont boldSystemFontOfSize:17.0]constrainedToSize:CGSizeMake(288.0, 1000)lineBreakMode:NSLineBreakByClipping];
    CGSize size=CGSizeMake(288.0, 1000);
    UIFont *font = [UIFont fontWithName:@"Helvetica-Bold" size:17.0];
    NSDictionary *atttibutes=@{NSFontAttributeName:font};
    CGSize titleSize = [self.activity.title boundingRectWithSize:size options:NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading attributes:atttibutes context:nil].size;
    self.titleLabel.frame = CGRectMake(MARGIN_HORIZONTAL, MARGIN_VERTICAL, INNER_WIDTH, titleSize.height);
    self.titleLabel.text = self.activity.title;
    if (hasPhoto) {
        self.titleView.frame = CGRectMake(0, 200, 320, self.titleLabel.frame.origin.y + self.titleLabel.frame.size.height + MARGIN_VERTICAL);
    } else {
        self.titleView.frame = CGRectMake(0, 0, 320, self.titleLabel.frame.origin.y + self.titleLabel.frame.size.height + MARGIN_VERTICAL);
    }
    [self.mainScrollView addSubview:self.titleView];
    
    // detail view
    self.detailView.frame = CGRectMake(0, self.titleView.frame.origin.y + self.titleView.frame.size.height, 320, self.detailView.frame.size.height);
//    NSArray *timeInfoList = [self.activity.dateInfo componentsSeparatedByString:@"/"];
//    NSArray *dateList = [(NSString *)[timeInfoList objectAtIndex:0] componentsSeparatedByString:@"||"];
//    NSString *timeString = [dateList objectAtIndex:0];
    self.timeLabel.textColor = [Colors blueColor];
//    self.timeLabel.text = [NSString stringWithFormat:@"%@: %@", NSLocalizedString(@"detail time", nil), timeString];
//    EventDate *nextDate = [self.activity getNextEventTime];
//    self.timeLabel.text = [[nextDate.date stringByAppendingString:@" "] stringByAppendingString:nextDate.time];
    self.timeLabel.text = self.activity.startTime;
    self.areaLabel.text = [NSString stringWithFormat:@"%@: %@", NSLocalizedString(@"detail place", nil), self.activity.area];
    self.classicLabel.text = [NSString stringWithFormat:@"%@: %@", NSLocalizedString(@"detail classic", nil), NSLocalizedString(self.activity.classification, nil)];
    self.costLabel.textColor = [UIColor orangeColor];
    self.costLabel.text = [NSString stringWithFormat:@"%@: %zi%@", NSLocalizedString(@"detail cost", nil), self.activity.coin, NSLocalizedString(@"detail coin", nil)];
    [self.mainScrollView addSubview:self.detailView];
    
    // description view
  //  CGSize descriptionContentSize = [self.activity.content sizeWithFont:[UIFont systemFontOfSize:15.0]constrainedToSize:CGSizeMake(288, 1000)lineBreakMode:NSLineBreakByClipping];
    UIFont *contentFont = [UIFont fontWithName:@"Helvetica-Bold" size:15.0];
    NSDictionary *contentAtttibutes=@{NSFontAttributeName:contentFont};
    CGSize descriptionContentSize = [self.activity.content boundingRectWithSize:size options:NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading attributes:contentAtttibutes context:nil].size;

    self.descriptionTitleLabel.text = NSLocalizedString(@"detail detail", nil);
    self.descriptionContentLabel.frame = CGRectMake(16,
                                                    self.descriptionContentLabel.frame.origin.y,
                                                    288,
                                                    descriptionContentSize.height);
    self.descriptionContentLabel.text = self.activity.content;
    self.descriptionContentLabel.lineBreakMode = NSLineBreakByWordWrapping;
    self.descriptionContentLabel.numberOfLines = 0;
    self.descriptionView.frame = CGRectMake(0,
                                            self.detailView.frame.origin.y + self.detailView.frame.size.height,
                                            320,
                                            self.descriptionContentLabel.frame.origin.y + self.descriptionContentLabel.frame.size.height + MARGIN_VERTICAL);
    [self.mainScrollView addSubview:self.descriptionView];
    
    [self configSignupView];
}

- (void)configSignupView
{
    [self.signupInfoView removeFromSuperview];
    [self.signupView removeFromSuperview];
    if (_hasJoined) {
        self.infoView.hidden = NO;
        self.timeView.hidden = YES;
        self.signupButton.hidden = YES;
        self.cancelButton.hidden = NO;
        self.joinedNumberView.hidden = YES;
        [self.cancelButton setBackgroundImage:[PublicFunctions strecthableImage:BTN_LARGE_RED_IMAGE] forState:UIControlStateNormal];
        [self.cancelButton setTitle:NSLocalizedString(@"activity cancel apply", nil) forState:UIControlStateNormal];
        [self.cancelButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        self.cancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:20];

        if (self.activity.getMemberInfo) {
            self.infoView.hidden = NO;
            for (UIView *subView in [self.infoView subviews]) {
                [subView removeFromSuperview];
            }
            [self.infoView addSubview:self.infoTitleLabel];
            NSArray *infoTitles = [self.activity.memberInfoList componentsSeparatedByString:@","];
            NSArray *infoContents = [self.activity.memberInfo componentsSeparatedByString:@","];
            NSInteger count = [infoTitles count];
            for (int i = 0; i < count; i++) {
                NSString *title = [NSString stringWithFormat:@"%@: ", [infoTitles objectAtIndex:i]];
                NSString *content = [infoContents objectAtIndex:i];
                UILabel *titleLabel = [[UILabel alloc] init];
                CGSize labelSize = [title sizeWithFont:[UIFont systemFontOfSize:15] constrainedToSize:CGSizeMake(150, 21)];
                titleLabel.frame = CGRectMake(0, 25 * (i + 1), labelSize.width, labelSize.height);
                titleLabel.font = [UIFont systemFontOfSize:15];
                titleLabel.textColor = [UIColor blackColor];
                titleLabel.textAlignment = NSTextAlignmentLeft;
                titleLabel.text = title;
                [self.infoView addSubview:titleLabel];
                [titleLabel release];
                UILabel *contentLabel = [[UILabel alloc] init];
                contentLabel.frame = CGRectMake(labelSize.width, 25 * (i + 1), 283 - labelSize.width, 21);
                contentLabel.font = [UIFont boldSystemFontOfSize:15];
                contentLabel.textColor = [Colors blueColor];
                contentLabel.textAlignment = NSTextAlignmentLeft;
                contentLabel.text = content;
                [self.infoView addSubview:contentLabel];
                [contentLabel release];
            }
            
            self.infoView.frame = CGRectMake(self.infoView.frame.origin.x, self.infoView.frame.origin.y, 288, 25 * (count + 1));
            self.cancelButton.frame = CGRectMake(16,
                                                 self.infoView.frame.origin.y + self.infoView.frame.size.height + MARGIN_VERTICAL,
                                                 self.cancelButton.frame.size.width,
                                                 self.cancelButton.frame.size.height);
        } else {
            self.infoView.hidden = YES;
            self.cancelButton.frame = CGRectMake(16, 10, self.cancelButton.frame.size.width, self.cancelButton.frame.size.height);
        }
        
        self.signupView.frame = CGRectMake(0,
                                           self.descriptionView.frame.origin.y + self.descriptionView.frame.size.height,
                                           320,
                                           self.cancelButton.frame.origin.y + self.cancelButton.frame.size.height + MARGIN_VERTICAL);
    } else {
        BOOL needChooseTime = YES;
        if (needChooseTime) {
            self.joinedNumberView.hidden = NO;
            self.joinedNumberView.frame = CGRectMake(0, self.timeView.frame.origin.y + self.timeView.frame.size.height, 320, 65);
//            self.signupButton.frame = CGRectMake(16, self.timeView.frame.origin.y + self.timeView.frame.size.height, 288, 44);
            self.signupButton.frame = CGRectMake(16, self.joinedNumberView.frame.origin.y + self.joinedNumberView.frame.size.height, 288, 44);
            EventDate *date = [self.activity.dateArray objectAtIndex:_choosedDate];
            if (self.activity.maxMemberNumber) {
                self.joinedNumberLabel.text = [NSString stringWithFormat:@"%zi/%zi", date.joinedNumber, self.activity.maxMemberNumber];
            } else {
                self.joinedNumberLabel.text = [NSString stringWithFormat:@"%zi", date.joinedNumber];
            }
        } else {
            self.signupButton.frame = CGRectMake(16, 10, 288, 44);
        }
        _joinedNumberTitleLabel.text = NSLocalizedString(@"activity joined", nil);
        self.infoView.hidden = YES;
        self.timeView.hidden = NO;
        self.signupButton.hidden = NO;
        self.cancelButton.hidden = YES;
        if ([self.activity.dateArray count] > 0) {
            self.chooseTimeTitle.hidden = NO;
            self.chooseTimeImageView.hidden = NO;
            self.choosedTimeLabel.hidden = NO;
            EventDate *date = [self.activity.dateArray objectAtIndex:0];
            self.choosedTimeLabel.text = [[date.date stringByAppendingString:@" "] stringByAppendingString:date.time];
        } else {
            self.chooseTimeImageView.hidden = YES;
            self.chooseTimeTitle.hidden = YES;
            self.choosedTimeLabel.hidden = YES;
            self.signupButton.frame = CGRectMake(16, 10, 288, 44);
        }
        if (self.activity.getMemberInfo) {
            // sign up info view
            
            for (UIView *subView in [self.signupInputView subviews]) {
                [subView removeFromSuperview];
            }
            NSArray *infoList = [self.activity.memberInfoList componentsSeparatedByString:@","];
            self.signupInputView.frame = CGRectMake(self.signupInputView.frame.origin.x, self.signupInputView.frame.origin.y, 288, 46 * [infoList count] - 2);
            UIImageView *backgroundImageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, self.signupInputView.frame.size.width, self.signupInputView.frame.size.height)];
            backgroundImageView.image = [[UIImage imageNamed:@"table_white.png"] stretchableImageWithLeftCapWidth:20 topCapHeight:20];
            [self.signupInputView addSubview:backgroundImageView];
            [backgroundImageView release];
            
            for (int i = 0; i < [infoList count]; i++) {
                UIView *itemView = [[UIView alloc] initWithFrame:CGRectMake(0, 46 * i, 288, 44)];
                itemView.tag = 101;
                
                NSString *infoItem = [infoList objectAtIndex:i];
                UITextField *textField = [[UITextField alloc] init];
                textField.font = [UIFont systemFontOfSize:17];
                textField.background = nil;
                textField.frame = CGRectMake(8, 11, 272, 22);
                textField.placeholder = infoItem;
                textField.tag = 102;
                [itemView addSubview:textField];
                [self.signupInputView addSubview:itemView];
                [itemView release];
                [textField release];
                if (i < [infoList count] - 1) {
                    UIImageView *imageView = [[UIImageView alloc] init];
                    imageView.frame = CGRectMake(1, 46 * i + 44, 286, 2);
                    imageView.image = [UIImage imageNamed:@"divider_320.png"];
                    [self.signupInputView addSubview:imageView];
                    [imageView release];
                }
            }
            if (self.activity.telephone == nil || [self.activity.telephone isEqualToString:@""]) {
                self.phoneTitleLabel.hidden = YES;
                self.phoneContentLabel.hidden = YES;
                self.signupInfoView.frame = CGRectMake(self.signupInfoView.frame.origin.x, self.signupInfoView.frame.origin.y, 16, self.signupInputView.frame.origin.y + self.signupInputView.frame.size.height + MARGIN_VERTICAL);
            } else {
                self.phoneTitleLabel.hidden = NO;
                self.phoneContentLabel.hidden = NO;
                self.phoneTitleLabel.frame = CGRectMake(16, self.signupInputView.frame.origin.y + self.signupInputView.frame.size.height + MARGIN_VERTICAL, 288, 21);
                self.phoneContentLabel.frame = CGRectMake(16, self.phoneTitleLabel.frame.origin.y + self.phoneTitleLabel.frame.size.height + 4, 288, 21);
                self.phoneContentLabel.text = self.activity.telephone;
                self.phoneContentLabel.textColor = [Colors blueColor];
                self.signupInfoView.frame = CGRectMake(self.signupInfoView.frame.origin.x, self.signupInfoView.frame.origin.y, self.signupInfoView.frame.size.width, self.phoneContentLabel.frame.origin.y + self.phoneContentLabel.frame.size.height + MARGIN_VERTICAL);
            }
            self.signupInfoView.frame = CGRectMake(0,
                                                   self.descriptionView.frame.origin.y + self.descriptionView.frame.size.height,
                                                   320,
                                                   self.signupInfoView.frame.size.height);
            [self.mainScrollView addSubview:self.signupInfoView];
            
            self.signupView.frame = CGRectMake(0,
                                               self.signupInfoView.frame.origin.y + self.signupInfoView.frame.size.height,
                                               320,
                                               self.signupButton.frame.origin.y + self.signupButton.frame.size.height + MARGIN_VERTICAL);
        } else {
            self.signupView.frame = CGRectMake(0,
                                               self.descriptionView.frame.origin.y + self.descriptionView.frame.size.height,
                                               320,
                                               self.signupButton.frame.origin.y + self.signupButton.frame.size.height + MARGIN_VERTICAL);
        }
        [self.signupButton setBackgroundImage:[[UIImage imageNamed:LARGE_BLUE_BUTTON] stretchableImageWithLeftCapWidth:20 topCapHeight:20] forState:UIControlStateNormal];
        [self.signupButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [self.signupButton setTitle:NSLocalizedString(@"activity apply", nil) forState:UIControlStateNormal];
        self.signupButton.titleLabel.font = [UIFont boldSystemFontOfSize:20];
    }
    [self.mainScrollView addSubview:self.signupView];
    self.mainScrollView.contentSize = CGSizeMake(320, self.signupView.frame.origin.y + self.signupView.frame.size.height);
}


- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)keyboardWillShow:(NSNotification *)notif
{
    CGRect keyboardFrame = [[[notif userInfo] objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue];
    CGRect infoViewFrame = self.signupInfoView.frame;
    CGRect inputViewFrame = self.signupInputView.frame;
    _offsetY = self.mainScrollView.contentOffset.y;
    CGFloat marginTop = infoViewFrame.origin.y + inputViewFrame.origin.y + inputViewFrame.size.height - _offsetY;
    if (marginTop + keyboardFrame.size.height > [UISize screenHeightNotIncludingStatusBarAndNavBar]) {
        CGPoint offset = self.mainScrollView.contentOffset;
        offset.y = offset.y + marginTop + keyboardFrame.size.height - [UISize screenHeightNotIncludingStatusBarAndNavBar];
        [self.mainScrollView setContentOffset:offset animated:YES];
    }
}

- (void)keyboardWillHide:(NSNotification *)notif
{
    CGPoint offset = self.mainScrollView.contentOffset;
    offset.y = _offsetY;
    [self.mainScrollView setContentOffset:offset animated:YES];
}

// apply the event
- (IBAction)applyTheEvent:(UIButton *)sender
{
    EventDate *date = [self.activity.dateArray objectAtIndex:_choosedDate];
    NSMutableDictionary *jsonDic = [[NSMutableDictionary alloc] init];
    [jsonDic setObject:date.date forKey:@"date"];
    [jsonDic setObject:date.time forKey:@"time"];
    NSString *dateString = [jsonDic JSONString];
    BOOL hasEmptyItem = NO;
    NSMutableArray *detailInfoArray = [[NSMutableArray alloc] init];
    if (self.activity.getMemberInfo) {
        for (UIView *subview in [self.signupInputView subviews]) {
            if (subview.tag == 101) {
                UIView *textView = [subview viewWithTag:102];
                if ([textView isKindOfClass:[UITextField class]]) {
                    [detailInfoArray addObject:[(UITextField *)textView text]];
                    if ([[(UITextField *)textView text] isEqualToString:@""]) {
                        hasEmptyItem = YES;
                    }
                }
            }
        }
        if ([detailInfoArray count] > 0) {
            if (hasEmptyItem) {
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"empty item is not allowed", nil)
                                                                message:nil
                                                               delegate:self
                                                      cancelButtonTitle:NSLocalizedString(@"OK", nil)
                                                      otherButtonTitles:nil, nil];
                [alert show];
                self.alertView = alert;
                [alert release];
                return;
            }
            self.applyDetails = [detailInfoArray componentsJoinedByString:@","];
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                [WowTalkWebServerIF joinEvent:self.activity.eventId
                                    eventDate:dateString
                                       detail:[detailInfoArray componentsJoinedByString:@","]
                                 withCallbacl:@selector(didApplyEvent:)
                                 withObserver:self];
            });
        }
        [detailInfoArray release];
    } else {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            [WowTalkWebServerIF joinEvent:self.activity.eventId eventDate:dateString withCallback:@selector(didApplyEvent:) withObserver:self];
        });
    }
}

- (IBAction)cancelAppliedEvent:(UIButton *)sender
{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        [WowTalkWebServerIF cancelJoinTheEvent:self.activity.eventId withCallback:@selector(didCancelAppliedEvent:) withObserver:self];
    });
}

- (void)didApplyEvent:(NSNotification *)notif
{
    NSError *error = [[notif userInfo] objectForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        _hasJoined = YES;
        NSString *applyDetail = @"";
        if (self.activity.getMemberInfo) {
            applyDetail = self.applyDetails;
        }
        [Database updateEvent:self.activity withJoined:_hasJoined andMemberInfo:applyDetail];
        self.activity.memberJoinable = _hasJoined;
        self.activity.memberInfo = applyDetail;
        [self configSignupView];
    }
}

- (void)didCancelAppliedEvent:(NSNotification *)notif
{
    NSError *error = [[notif userInfo] objectForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        _hasJoined = NO;
        [self configSignupView];
        [Database updateEvent:self.activity withJoined:_hasJoined andMemberInfo:@""];
        self.activity.memberJoinable = _hasJoined;
        self.activity.memberInfo = @"";
    }
}


// show the date picker view
- (void)chooseDateButtonPressed
{
    UIToolbar *pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];
    pickerToolbar.barStyle = UIBarStyleBlackTranslucent;
    
    UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc] initWithTitle:NSLocalizedString(@"done", nil)
                                                                     style:UIBarButtonItemStylePlain
                                                                    target:self
                                                                    action:@selector(cancelPicker:)];
    [pickerToolbar setItems:[[NSArray alloc] initWithObjects:cancelButton, nil] animated:YES];
    [cancelButton release];
    
    
    UIPickerView *pickerView = [[UIPickerView alloc] initWithFrame:CGRectMake(0, 40, 320, 216)];
    pickerView.opaque = YES;
    pickerView.showsSelectionIndicator = YES;
    pickerView.backgroundColor = [UIColor whiteColor];
    pickerView.delegate = self;
    pickerView.dataSource = self;
    [pickerView selectRow:_choosedDate inComponent:0 animated:NO];
    
    DatePickerView *dateView = [[DatePickerView alloc] initWithFrame:CGRectMake(0, self.view.frame.size.height - 260, 320, 260)];
    [dateView addSubview:pickerToolbar];
    [dateView addSubview:pickerView];
    [dateView showInView:self.view];
    self.datePickerView = dateView;
    
    [pickerToolbar release];
    [pickerView release];
}

- (void)cancelPicker:(id)sender
{
    if (self.datePickerView) {
        [self.datePickerView dismissFromSuperView];
    }
    EventDate *date = [self.activity.dateArray objectAtIndex:_choosedDate];
    self.choosedTimeLabel.text = [[date.date stringByAppendingString:@" "] stringByAppendingString:date.time];
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    
}

# pragma mark pickerview delegate / datasource
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    return [self.activity.dateArray count];
}

- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    _choosedDate = row;
    EventDate *date = [self.activity.dateArray objectAtIndex:row];
    if (self.activity.maxMemberNumber > 0) {
        self.joinedNumberLabel.text = [NSString stringWithFormat:@"%zi/%zi", date.joinedNumber, self.activity.maxMemberNumber];
    } else {
        self.joinedNumberLabel.text = [NSString stringWithFormat:@"%zi", date.joinedNumber];
    }
}

- (UIView *)pickerView:(UIPickerView *)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView *)view
{
    EventDate *date = [self.activity.dateArray objectAtIndex:row];
    
    UIView *itemView = [[UIView alloc] init];
    itemView.frame = CGRectMake(0, 0, 320, 50);
    
    UILabel *dateLabel = [[UILabel alloc] init];
    dateLabel.frame = CGRectMake(30, 0, 255, 50);
    dateLabel.text = [[date.date stringByAppendingString:@" "] stringByAppendingString:date.time];
    dateLabel.font = [UIFont systemFontOfSize:16];
    [itemView addSubview:dateLabel];
    [dateLabel release];
    if (date.joinedNumber >= self.activity.maxMemberNumber && self.activity.maxMemberNumber > 0) {
        UIImageView *indicatorImageView = [[UIImageView alloc] init];
        indicatorImageView.frame = CGRectMake(270, 15, 30, 20);
        indicatorImageView.image = [[UIImage imageNamed:@"events_full_icon.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:7];
        [itemView addSubview:indicatorImageView];
        
        UILabel *indicatorLabel = [[UILabel alloc] initWithFrame:indicatorImageView.frame];
        indicatorLabel.textAlignment = NSTextAlignmentCenter;
        indicatorLabel.text = @"å·²æ»¡";
        indicatorLabel.font = [UIFont boldSystemFontOfSize:10];
        indicatorLabel.textColor = [UIColor whiteColor];
        [itemView addSubview:indicatorLabel];
        
        [indicatorLabel release];
        [indicatorImageView release];
    }
    return [itemView autorelease];
}

- (void)dealloc {
    [_alertView release];
    [_mainScrollView release];
    [_titleView release];
    [_titleLabel release];
    [_detailView release];
    [_timeLabel release];
    [_areaLabel release];
    [_classicLabel release];
    [_costLabel release];
    [_voiceView release];
    [_descriptionView release];
    [_descriptionTitleLabel release];
    [_descriptionContentLabel release];
    [_signupView release];
    [_signupInfoView release];
    [_signupInputView release];

    [_infoView release];
    [_timeView release];
    [_signupButton release];
    [_cancelButton release];
    [_chooseTimeTitle release];
    [_chooseTimeImageView release];
    [_choosedTimeLabel release];
    [_infoTitleLabel release];
    [_phoneTitleLabel release];
    [_phoneContentLabel release];
    [_datePickerView release];
    [_applyDetails release];
    [_joinedNumberView release];
    [_joinedNumberTitleLabel release];
    [_joinedNumberLabel release];
    [super dealloc];
}
- (void)viewDidUnload {
    [self setAlertView:nil];
    [self setMainScrollView:nil];
    [self setTitleView:nil];
    [self setTitleLabel:nil];
    [self setDetailView:nil];
    [self setTimeLabel:nil];
    [self setAreaLabel:nil];
    [self setClassicLabel:nil];
    [self setCostLabel:nil];
    [self setVoiceView:nil];
    [self setDescriptionView:nil];
    [self setDescriptionTitleLabel:nil];
    [self setDescriptionContentLabel:nil];
    [self setSignupView:nil];
    [self setSignupInfoView:nil];
    [self setSignupInputView:nil];
    [self setInfoView:nil];
    [self setTimeView:nil];
    [self setSignupButton:nil];
    [self setCancelButton:nil];
    [self setChooseTimeTitle:nil];
    [self setChooseTimeImageView:nil];
    [self setChoosedTimeLabel:nil];
    [self setInfoTitleLabel:nil];
    [self setPhoneTitleLabel:nil];
    [self setPhoneContentLabel:nil];
    [self setDatePickerView:nil];
    [self setApplyDetails:nil];
    [self setJoinedNumberView:nil];
    [self setJoinedNumberTitleLabel:nil];
    [self setJoinedNumberLabel:nil];
    [super viewDidUnload];
}
@end
