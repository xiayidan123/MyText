//
//  CameraViewController.m
//  omim
//
//  Created by Harry on 12-9-26.
//  Copyright (c) 2012年 WowTech Inc. All rights reserved.
//

#import "CameraViewController.h"
#import <MobileCoreServices/MobileCoreServices.h>
#import <MediaPlayer/MediaPlayer.h>
#import "MsgComposerVC.h"
#import "WTHeader.h"
#import "Constants.h"
#import <AVFoundation/AVFoundation.h>
@implementation CameraViewController



@synthesize imagePath;
@synthesize thumbnailPath;
@synthesize videoPath;
@synthesize parent = _parent;
@synthesize dirName;
@synthesize delegate;
@synthesize mmtType ;
@synthesize maxThumbnailSize = _maxThumbnailSize;

@synthesize needCropping = _needCropping;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        NSLog(@"334");
        
    }
    return self;
}

- (BOOL)startCamera
{
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]){
        NSString *mediaType = AVMediaTypeVideo;
        AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:mediaType];
        if(authStatus == AVAuthorizationStatusRestricted || authStatus == AVAuthorizationStatusDenied){
            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"" message:@"请在【设置-隐私-相机】中允许访问相机。" delegate:self cancelButtonTitle:nil otherButtonTitles:@"取消", nil];
            [alertView show];
            [alertView release];
            return NO;
            
        }
    }
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])
    {
        self.imagePath = [NSFileManager randomRelativeFilePathInDir:dirName ForFileExtension:JPG];
        self.thumbnailPath = [NSFileManager randomRelativeFilePathInDir:dirName ForFileExtension:JPG];
        
        UIImagePickerController *imagepicker = [[UIImagePickerController alloc] init];
        
        imagepicker.sourceType = UIImagePickerControllerSourceTypeCamera;
    
        imagepicker.mediaTypes = [UIImagePickerController availableMediaTypesForSourceType:UIImagePickerControllerSourceTypeCamera];
        imagepicker.videoMaximumDuration = 10;
        imagepicker.delegate = self;
         self.mmtType = MMT_UNKNOWN;
       
        imagepicker.showsCameraControls = TRUE;
        
        [self.parent presentViewController:imagepicker animated:YES completion:nil];
        
       [[UIApplication sharedApplication] setStatusBarHidden:NO];
        
        [imagepicker release];
        
        return YES;
    }
    else
    {
        return NO;
    }
    
    return  NO;
}

- (IBAction)cameraClicked:(id)sender
{
    [self startCamera];
}


- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{

   
    
    NSString *mediaType = [info objectForKey:UIImagePickerControllerMediaType];
    
    if ([mediaType isEqualToString:(NSString *)kUTTypeImage])
    {
        // get the image and save it
        self.mmtType = MMT_PHOTO;
        
        UIImage *image = [info
                          objectForKey:UIImagePickerControllerOriginalImage];
        
        
        CGSize targetSize;
        CGSize targetSizeThumbnail;
        
        UIImage *scaledImage;
        UIImage* thumbnailImage;
        
        if (self.needCropping)
        {
            
            if (image.size.height>image.size.width)
            {
                targetSize = [image calculateTheScaledSize:CGSizeMake(image.size.width, image.size.width) withMaxSize: CGSizeMake(PhotoMaxWidth, PhotoMaxHeight)];
            }
            else
            {
                targetSize = [image calculateTheScaledSize:CGSizeMake(image.size.height, image.size.height) withMaxSize: CGSizeMake(PhotoMaxWidth, PhotoMaxHeight)];
            }
            
            scaledImage = [image resizeToSqaureSize:targetSize];
            
            targetSizeThumbnail = [scaledImage calculateTheScaledSize:CGSizeMake(scaledImage.size.width, scaledImage.size.height) withMaxSize: self.maxThumbnailSize];
            
            thumbnailImage = [image resizeToSqaureSize:targetSizeThumbnail];
            
        }
        
        else
        {
            targetSize = [image calculateTheScaledSize:CGSizeMake(image.size.width, image.size.height) withMaxSize: CGSizeMake(PhotoMaxWidth, PhotoMaxHeight)];
            
            scaledImage = [image resizeToSize:targetSize];
            
            targetSizeThumbnail = [scaledImage calculateTheScaledSize:CGSizeMake(scaledImage.size.width, scaledImage.size.height) withMaxSize: self.maxThumbnailSize];
            
            thumbnailImage = [image resizeToSize:targetSizeThumbnail];
        }
        
        
     //   NSLog(@"scaled image size width: %f, height: %f", scaledImage.size.width, scaledImage.size.height);
      //  NSLog(@"scaled thumbnail size width: %f, height: %f", thumbnailImage.size.width, thumbnailImage.size.height);
       
        NSData * data = [NSData dataWithData:UIImageJPEGRepresentation(scaledImage, 1.0f)];//1.0f = 100% quality
        
        [data writeToFile:[NSFileManager absolutePathForFileInDocumentFolder:self.imagePath] atomically:YES];
        
         NSData * data2 = [NSData dataWithData:UIImageJPEGRepresentation(thumbnailImage, 1.0f)];  //1.0f = 100% quality
        
        [data2 writeToFile: [NSFileManager absolutePathForFileInDocumentFolder:self.thumbnailPath] atomically:YES];
        
        [self.delegate getDataFromCamera:self];
           
        [[UIApplication sharedApplication] setStatusBarHidden:NO];
        
        [self.parent dismissModalViewControllerAnimated:YES];
     
        /*
        if([self.parent isKindOfClass:[MsgComposerVC class]])
        {
            [(MsgComposerVC*)self.parent uv_barcontainer].hidden = NO;
        }
        */
    }
    else if ([mediaType isEqualToString:(NSString *)kUTTypeMovie])
    {
        self.mmtType = MMT_MOVIE;
        
        NSURL* tmpPath = [info objectForKey:UIImagePickerControllerMediaURL] ;
        
        self.videoPath = [NSFileManager randomRelativeFilePathInDir:dirName ForFileExtension:MP4];
        
        MediaProcessing* mp= [[[MediaProcessing alloc] init] autorelease];
        
        mp.delegate = self;
        
        [mp convertVideo:tmpPath intoNewVideo:[NSFileManager absolutePathForFileInDocumentFolder: self.videoPath]];
        
        MPMoviePlayerController *mpplayer = [[[MPMoviePlayerController alloc] initWithContentURL:tmpPath] autorelease];
        
        mpplayer.shouldAutoplay = NO;
        
        UIImage *firstframe = [mpplayer thumbnailImageAtTime:0 timeOption:MPMovieTimeOptionNearestKeyFrame] ;
        
        
        CGSize targetSizeThumbnail = [firstframe calculateTheScaledSize:CGSizeMake(firstframe.size.width, firstframe.size.height) withMaxSize:self.maxThumbnailSize];
        
        UIImage* thumbnailImage = [firstframe resizeToSize:targetSizeThumbnail];
    
    //    NSLog(@"scaled thumbnail size width: %f, height: %f", thumbnailImage.size.width, thumbnailImage.size.height);
        
        NSData * data2 = [NSData dataWithData:UIImageJPEGRepresentation(thumbnailImage, 1.0f)];  //1.0f = 100% quality
        
        [data2 writeToFile:[NSFileManager absolutePathForFileInDocumentFolder:self.thumbnailPath] atomically:YES];
        
     //   [self.delegate getDataFromCamera:self];
        [[UIApplication sharedApplication] setStatusBarHidden:NO];
    }
}




-(void)didFailedProcessing:(MediaProcessing *)delegate
{
    
    [[UIApplication sharedApplication] setStatusBarHidden:NO];
    [self.parent dismissModalViewControllerAnimated:YES];
    /*
    if([self.parent isKindOfClass:[MsgComposerVC class]])
    {
        [(MsgComposerVC*)self.parent uv_barcontainer].hidden = NO;
    }
    */

    //TODO: show a pop up saying the process is wrong.
}


-(void)didFinishProcessing:(MediaProcessing *)delegate
{
    
    
    [[UIApplication sharedApplication] setStatusBarHidden:NO];   // have to call before dismiss.  Guess the following dismiss will layout based on the current status bar state.
    
    [self.parent dismissModalViewControllerAnimated:YES];
   /*
    if([self.parent isKindOfClass:[MsgComposerVC class]])
    {
        [(MsgComposerVC*)self.parent uv_barcontainer].hidden = NO;
    }
    */
 
    
    [self.delegate getDataFromCamera:self];
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    
    [[UIApplication sharedApplication] setStatusBarHidden:NO];
    
    [self.parent dismissModalViewControllerAnimated:YES];
   /*
    if([self.parent isKindOfClass:[MsgComposerVC class]])
    {
        [(MsgComposerVC*)self.parent uv_barcontainer].hidden = NO;
    }
    */
   
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    if (IS_IOS7) {
        [self.view setAutoresizesSubviews:FALSE];
        [self.view setAutoresizingMask:UIViewAutoresizingNone];
        self.edgesForExtendedLayout = UIRectEdgeNone;
        self.automaticallyAdjustsScrollViewInsets = NO;
    }
    
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

- (void)didReceiveMemoryWarning
{

}



-(void)viewWillDisappear:(BOOL)animated
{
    [[UIApplication sharedApplication] setStatusBarHidden:NO];
}

-(void)viewDidDisappear:(BOOL)animated
{
     [[UIApplication sharedApplication] setStatusBarHidden:NO];
    
}


-(void)dealloc
{
    self.imagePath = nil;
    self.thumbnailPath = nil;
    self.videoPath = nil;
    self.dirName = nil;

    
    [super dealloc];
}

@end
