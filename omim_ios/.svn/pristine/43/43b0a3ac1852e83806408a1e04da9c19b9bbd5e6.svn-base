//
//  EditGroupInfoViewController.m
//  omim
//
//  Created by coca on 2013/04/30.
//  Copyright (c) 2014å¹´ OneMeter Inc. All rights reserved.
//

#import "EditGroupInfoViewController.h"
#import <QuartzCore/QuartzCore.h>
#import <MobileCoreServices/MobileCoreServices.h>
#import "PublicFunctions.h"
#import "Constants.h"
#import "WTHeader.h"

#import "UIGridView.h"
#import "UIGridViewCell.h"
#import "GroupInfoBuddyCell.h"
#import "GroupMember.h"

#import "ContactPickerViewController.h"

#import "ContactInfoViewController.h"

#import "CustomActionSheet.h"
#import "ChangeGroupNameViewController.h"

#import "ViewDetailedLocationVC.h"
#import "CustomAnnotation.h"

#import "NonUserContactViewController.h"
#import "UIPlaceHolderTextView.h"

#import "ChoosePlaceViewController.h"

#define TAG_AVATAR    1
#define TAG_LABEL   2
#define TAG_INPUTFIELD 3
#define TAG_FRAME      4

#define TAG_ACTIONSHEET_TAKEPHOTO 100
#define TAG_ACTIONSHEET_SELECT_PLACE 101
#define TAG_ACTIONSHEET_SELECT_GROUP_TYPE 102

@interface EditGroupInfoViewController ()
{
    BOOL ableToDelete;
    BOOL ableToAdd;
    BOOL keyboardIsShown;
    
    UIImagePickerController* picker;
    
    BOOL avatarChanged;
    
    UIPlaceHolderTextView* tf_input;
    UITapGestureRecognizer* tap;
    
    CGFloat oldOffset_height;
}

@property (nonatomic,retain) NSMutableArray* arr_increase;
@property (nonatomic,retain) NSMutableArray* arr_decrease;

@property (nonatomic,retain) NSString* groupid;
@property (nonatomic,retain) MemberGridView* gridview;
@property (nonatomic,retain) NSMutableArray* memberlist;
@property (nonatomic,retain) NSString* imagepath;
@property (nonatomic,retain) NSString* groupname;
@property (nonatomic,retain) NSString* place;

@property (nonatomic,retain) NSString* introduction;
@property  (nonatomic,retain) NSString* type;

@property (nonatomic) double latitude;
@property (nonatomic) double longitude;

@end

@implementation EditGroupInfoViewController
@synthesize tb_group = _tb_group;
@synthesize group = _group;
@synthesize inDeleteMode = _inDeleteMode;
@synthesize gridview = _gridview;
@synthesize memberlist = _memberlist;
@synthesize groupid  = _groupid;


#pragma mark -
#pragma mark - GridViewDelegate

-(void)becomeDeleteMode:(MemberGridView *)requstor
{
    self.inDeleteMode = TRUE;
    [self.tb_group reloadData];
    [self.tb_group scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:2] atScrollPosition:UITableViewRowAnimationTop animated:YES];
}

-(void)didDeleteMember:(GroupMember *)member inGridView:(MemberGridView *)requestor
{
    
    [self.arr_decrease addObject:member];
    
    for (int i = 0; i< [self.arr_increase count]; i ++) {
        GroupMember* oldmember = [self.arr_increase objectAtIndex:i];
        if([member.userID isEqualToString:oldmember.userID])
            [self.arr_increase removeObject:oldmember];
    }
    
    [self.memberlist removeObject:member];
    [self.tb_group reloadData];
}

-(void)becomeAddMode:(MemberGridView *)requestor
{
    // NSLog(@"try to add members");
    
    ContactPickerViewController* cpvc = [[ContactPickerViewController alloc] init];
    cpvc.isManageGroupMember = TRUE;
    cpvc.exsitingBuddys = self.memberlist;
    cpvc.delegate = self;
    [self.navigationController pushViewController:cpvc animated:YES];
    [cpvc release];
}

-(void)didSelectMember:(GroupMember *)member inGridView:(MemberGridView *)requestor
{
    if ([member.buddy_flag isEqualToString:@"2"]) {
        
        NonUserContactViewController* nucvc = [[NonUserContactViewController alloc] init];
        nucvc.buddy = [Database buddyWithUserID:member.userID];
        [self.navigationController pushViewController:nucvc animated:TRUE];
        [nucvc release];
        
    }
    else{
        
        //   NSLog(@"select a member");
        ContactInfoViewController* civc = [[ContactInfoViewController alloc] init];
        civc.buddy = [Database buddyWithUserID:member.userID];
        if ([member.buddy_flag isEqualToString:@"1"]) {
            civc.contact_type = CONTACT_FRIEND;
        }
        else
            civc.contact_type = CONTACT_STRANGER;
        
        
        [self.navigationController pushViewController:civc animated:YES];
        [civc release];
    }
}

-(void)dismissDeleteMode:(id)sender
{
    self.inDeleteMode = FALSE;
    [self.tb_group reloadData];
    
}

#pragma mark -contactpickerdelegate;
-(void)didChooseGroupMembers:(NSArray *)members withRequestor:(ContactPickerViewController *)requestor
{
    NSArray* selectedgroupmembers = [GroupMember normalGroupMembersFromBuddys:members];
    
    [self.arr_increase addObjectsFromArray:selectedgroupmembers];
    
    for (GroupMember* newmember in selectedgroupmembers) {
        for (int i = 0; i< [self.arr_decrease count]; i ++) {
            GroupMember* oldmember = [self.arr_decrease objectAtIndex:i];
            if([newmember.userID isEqualToString:oldmember.userID])
                [self.arr_decrease removeObject:oldmember];
        }
    }
    
    [self.memberlist addObjectsFromArray:selectedgroupmembers];
    
    [self.tb_group reloadData];
}

#pragma mark -
#pragma mark - table view delegate

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    int section = indexPath.section;
    int row = indexPath.row;
    
    if (section == 0 || section == 1) {
        UITableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:@"introcell"];
        if (cell == nil) {
            cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"introcell"] autorelease];
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
            
            UILabel* deslabel = [[UILabel alloc] initWithFrame:CGRectMake(110, 7, 160, 30)];
            deslabel.tag = TAG_LABEL;
            deslabel.font = [UIFont systemFontOfSize:FONT_SIZE_17];
            deslabel.numberOfLines = 1;
            deslabel.textColor = [UIColor blackColor];
            deslabel.textAlignment = NSTextAlignmentRight;
            deslabel.adjustsFontSizeToFitWidth = NO;
            deslabel.lineBreakMode = NSLineBreakByTruncatingTail;
            deslabel.backgroundColor = [UIColor clearColor];
            
            UIImageView* imageview = [[UIImageView alloc] initWithFrame:CGRectMake(220, 5, 50, 50)];
            imageview.tag = TAG_AVATAR;
            imageview.layer.masksToBounds = YES;
            imageview.layer.cornerRadius = 5.0f;
            
            UIImageView* imageframe = [[UIImageView alloc] initWithFrame:imageview.frame];
            imageframe.tag = TAG_FRAME;
            //    [imageframe setImage:[UIImage imageNamed:AVATAR_MASK_FRAME]];
            
            
            [cell.contentView addSubview:deslabel];
            [deslabel release];
            [cell.contentView addSubview:imageview];
            [imageview release];
            cell.detailTextLabel.text = @"";
            
            [cell.contentView addSubview:imageframe];
            [imageframe release];
        }
        
        UIImageView* imageview = (UIImageView*)[cell.contentView viewWithTag:TAG_AVATAR];
        UILabel* label = (UILabel*)[cell.contentView viewWithTag:TAG_LABEL];
        
        UIImageView* imageframe = (UIImageView*)[cell.contentView viewWithTag:TAG_FRAME];
        
        imageframe.hidden = true;
        label.hidden = false;
        imageview.hidden = TRUE;
        
        if (section == 0 && row == 0) {
            cell.textLabel.text = NSLocalizedString(@"Group name", nil);
            label.text = self.groupname;
        }
        else if (section == 0 && row == 1){
            imageview.hidden = false;
            label.hidden = TRUE;
            imageframe.hidden = FALSE;
            cell.textLabel.text = NSLocalizedString(@ "Group avatar", nil);
            UIImage* image = [[[UIImage alloc] initWithContentsOfFile:self.imagepath] autorelease]; // image path has to be absolute;
            if (image) {
                [imageview setImage:image];
            }
            else{
                
               [imageview setImage:[UIImage imageNamed:DEFAULT_GROUP_AVATAR]];
            }
        }
        else if (section == 1){
            if (row == 0) {
//                cell.textLabel.text = NSLocalizedString(@"Location", nil);
//                label.text = self.place;
                
                cell.textLabel.text = NSLocalizedString(@"Group type", nil);
                if (self.type == nil) {
                    self.type = @"class";
                }
                label.text = [UserGroup groupType:self.type];

            }
            else if (row == 1){
                cell.textLabel.text = NSLocalizedString(@"Group type", nil);
                if (self.type == nil) {
                    self.type = @"class";
                }
                label.text = [UserGroup groupType:self.type];
            }
        }
        
        return cell;
    }
    
    else if (section == 2){
        
        UITableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:@"FriendCell"];
        if (cell == nil) {
            cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"FriendCell"] autorelease];
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
            UILabel* deslabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 300, 44)];
            deslabel.tag = TAG_LABEL;
            deslabel.font = [UIFont systemFontOfSize:FONT_SIZE_17];
            deslabel.numberOfLines = 0;
            deslabel.textColor = [UIColor blackColor];
            deslabel.textAlignment = NSTextAlignmentCenter;
            deslabel.adjustsFontSizeToFitWidth = NO;
            deslabel.lineBreakMode = NO;
            deslabel.backgroundColor = [UIColor clearColor];
            
            [cell.contentView addSubview:deslabel];
            [deslabel release];
            
        }
        UILabel* label = (UILabel*)[cell.contentView viewWithTag:TAG_LABEL];
        
        
        label.text = [NSString stringWithFormat:NSLocalizedString(@"Members(%d)", nil), [self.memberlist count]];
        [label setFrame:CGRectMake(10, 10, 300, 30)];
        label. textAlignment = NSTextAlignmentLeft;
        
        if (self.gridview && [self.gridview superview]!=nil) {
            [self.gridview removeFromSuperview];
        }
        
        self.gridview = [[[MemberGridView alloc] initWithFrame:CGRectMake(10, 40, 58*5, 2 * 79) withMembers:self.memberlist showingAllMembers:TRUE ableToAdd:TRUE ableToDelete:true isCreator:self.isCreator isManager:self.isManager isDeleteMode:self.inDeleteMode] autorelease];
        
        self.gridview.scrollEnabled = FALSE;
        self.gridview.caller = self;
        
        [cell addSubview:self.gridview];
        
        return cell;
        
    }
    else if (section == 3){
        
        UITableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:@"InputCell"];
        if (cell == nil) {
            cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"InputCell"] autorelease];
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            [cell.contentView addSubview:tf_input];
        }
        return cell;
    }
    return nil;
    
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    
    if (section == 0) {
        return 2;
    }
    else if (section == 1){
        return 1;
    }
    else if (section == 2){
        return 1;
    }
    else if (section == 3){
        return 1;
    }
    return 0;
}

-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    
    return 4;
    
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    int section = indexPath.section;
    int row = indexPath.row;
    if (section == 0) {
        if (row == 0) return 44;
        else if (row == 1) return 60;
    }
    else if (section == 1){
        return 44;
    }
    else if (section == 2){
        return 40 + [MemberGridView heightForViewWithMembers:[self.memberlist count] showingAll:YES ableToAdd:YES ableToDelete:YES isDeleteMode:self.inDeleteMode];
    }
    else if (section == 3){
        return 100;
    }
    return 0;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    if (indexPath.section == 0 ) {
        if (indexPath.row == 0) {
            ChangeGroupNameViewController* cgnvc = [[ChangeGroupNameViewController alloc] init];
            cgnvc.delegate = self;
            cgnvc.oldGroupName = self.groupname;
            
            [self.navigationController pushViewController:cgnvc animated:TRUE];
        }
        else if (indexPath.row == 1) {
            UIActionSheet *avatarSheet=[[UIActionSheet alloc]initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel" , nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Take a photo", nil),NSLocalizedString(@"Open album",nil), nil];
            avatarSheet.tag=TAG_ACTIONSHEET_TAKEPHOTO;
            [avatarSheet showInView:self.view];
            [avatarSheet release];
        }
    }
    else if (indexPath.section == 1){
        if (indexPath.row == 0) {
//            ViewDetailedLocationVC* vdl = [[[ViewDetailedLocationVC alloc] initWithNibName:@"ViewDetailedLocationVC" bundle:nil] autorelease];
//            
//            vdl.mode = PICK_TO_SET_GROUP_POSITION;
//            vdl.delegate = self;
//            
//            [self.navigationController pushViewController:vdl animated:YES];
            
//            UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel", nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"location.all", nil), NSLocalizedString(@"location.city", nil), NSLocalizedString(@"location.secret", nil), nil];
//            actionSheet.tag = TAG_ACTIONSHEET_SELECT_PLACE;
//            [actionSheet showInView:self.view];
//            [actionSheet release];
            
            if (self.type == nil) {
                self.type = @"class";
            }
            CustomActionSheet* actionsheet = [[CustomActionSheet alloc] initGroupPickerWithInitialChoice:self.type delegate:self];
            actionsheet.tag=TAG_ACTIONSHEET_SELECT_GROUP_TYPE;
            [actionsheet showInView:self.view];

        }
        if (indexPath.row == 1) {
            if (self.type == nil) {
                self.type = @"class";
            }
            CustomActionSheet* actionsheet = [[CustomActionSheet alloc] initGroupPickerWithInitialChoice:self.type delegate:self];
            actionsheet.tag=TAG_ACTIONSHEET_SELECT_GROUP_TYPE;
            [actionsheet showInView:self.view];
        }
    }
    if (indexPath.section != 2) {
        self.inDeleteMode = FALSE;
        [self.tb_group reloadData];
    }
    
    
}


#pragma mark - actionsheet delegate

- (void) actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == [actionSheet cancelButtonIndex]) {
        return;
    }
    
    if (TAG_ACTIONSHEET_TAKEPHOTO == actionSheet.tag) {
        picker = [[UIImagePickerController alloc] init];
        [picker setDelegate:self];
        picker.allowsEditing = YES;
        
        //TODO: not good way to wrap all the function here. currently we use it for temp.
        switch (buttonIndex) {
            case 0:
                [self showImagePicker:UIImagePickerControllerSourceTypeCamera];
                break;
            case 1:
                [self showImagePicker:UIImagePickerControllerSourceTypePhotoLibrary];
                break;
            case 5:
                self.type = [(CustomActionSheet*)actionSheet chosenType];
                [self.tb_group reloadData];
                
            default:
                break;
        }
        [picker release];
    } else if(TAG_ACTIONSHEET_SELECT_PLACE == actionSheet.tag) {
        if (buttonIndex == 0) {
            self.place = NSLocalizedString(@"location.all", nil);
        } else if (buttonIndex == 1) {
            //            self.place = NSLocalizedString(@"location.city", nil);
            ChoosePlaceViewController *chooseVC = [[ChoosePlaceViewController alloc] init];
            chooseVC.delegate = self;
            [self.navigationController pushViewController:chooseVC animated:YES];
            [chooseVC release];
        } else if (buttonIndex == 2) {
            self.place = NSLocalizedString(@"location.secret", nil);
        }
        [self.tb_group reloadData];
    } else if(TAG_ACTIONSHEET_SELECT_GROUP_TYPE == actionSheet.tag) {
        switch (buttonIndex) {
            case 0:
                [self showImagePicker:UIImagePickerControllerSourceTypeCamera];
                break;
            case 1:
                [self showImagePicker:UIImagePickerControllerSourceTypePhotoLibrary];
                break;
            case 5:
                self.type = [(CustomActionSheet*)actionSheet chosenType];
                [self.tb_group reloadData];
                
            default:
                break;
        }
    }
    
    
}

#pragma mark - Choose Place Delegate
- (void)didChoosePlace:(NSString *)place
{
    [self.navigationController popViewControllerAnimated:YES];
    self.place = place;
    [self.tb_group reloadData];
}


#pragma mark -
#pragma mark -- uipickercontroller

- (void)showImagePicker:(UIImagePickerControllerSourceType)sourceType
{
    if ([UIImagePickerController isSourceTypeAvailable:sourceType])
    {
        [picker setSourceType:sourceType];
        
        picker.mediaTypes = [[[NSArray alloc] initWithObjects: (NSString *)
                              kUTTypeImage, nil] autorelease];
        
        [self presentViewController:picker animated:YES completion:nil];
    }
}


#pragma mark - UIPickerControllerDelegate
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{
    [self dismissViewControllerAnimated:YES completion:nil];
    
    UIImage *originalImage = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
    UIImage *thumbnail = [AvatarHelper getThumbnailFromImage:originalImage];
    UIImage *avatar = [AvatarHelper getPhotoFromImage:originalImage];
    
    avatarChanged = TRUE;
    
    NSString* thumbpath = [NSFileManager relativePathToDocumentFolderForFile:@"gthumbnail" WithSubFolder:GROUP_AVATAR_THUMBNAIL_FOLDER];
    
    [UIImageJPEGRepresentation(thumbnail, 0.8) writeToFile:[NSFileManager absolutePathForFileInDocumentFolder:thumbpath] atomically:YES];
    
    NSString* photostr =  [NSFileManager relativePathToDocumentFolderForFile:@"gphoto" WithSubFolder:GROUP_AVATAR_FOLDER];
    NSString* photopath = [NSFileManager absolutePathForFileInDocumentFolder:photostr];
    
    [UIImageJPEGRepresentation(avatar, 0.8) writeToFile:photopath atomically:YES];
    
    self.imagepath = [NSFileManager absolutePathForFileInDocumentFolder:thumbpath];
    
    [self.tb_group reloadRowsAtIndexPaths:[NSArray arrayWithObject:[NSIndexPath indexPathForRow:1 inSection:0]] withRowAnimation:UITableViewRowAnimationNone];
}


- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    /*æ·»å ä»£ç ï¼å¤çéä¸­å¾åååæ¶çæåµ*/
    [self dismissViewControllerAnimated:YES completion:nil];//éåºç§ç¸æº
}

#pragma mark - map delegate
-(void)getDataFromMap:(ViewDetailedLocationVC *)requestor
{
    self.place = requestor.annotation.shortTitle;
    self.latitude = requestor.annotation.coordinate.latitude;
    self.longitude = requestor.annotation.coordinate.longitude;
    [self.tb_group reloadData];
}


#pragma mark - change info delegate
-(void)didChangeGroupNameTo:(NSString *)name withRequestor:(ChangeGroupNameViewController *)requestor
{
    self.groupname = name;
    [self.tb_group reloadData];
}


#pragma mark - callback
-(void)modifyAvatargraph:(NSNotification *)notification
{
    NSError* error = [[notification userInfo] valueForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        [WowTalkWebServerIF editGroup:self.groupid withName:self.groupname withStatus:self.introduction withPlacename:self.place withLongitude:self.longitude withLatitude:self.latitude withBreifIntroduction:self.introduction withGroupType:self.type NeedUpdateTimeStamp:TRUE withCallback:@selector(didEditGroup:) withObserver:self];
    }
}

-(void)modifyAvatarThumbnail:(NSNotification*)notif
{
    NSError* error = [[notif userInfo] valueForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        NSString* oldphoto = [NSFileManager absolutePathForFileInDocumentFolder:[NSFileManager relativePathToDocumentFolderForFile:@"gphoto" WithSubFolder:GROUP_AVATAR_FOLDER]];
        NSString* lastpathcomponent = self.groupid;
        NSString* newpath = [[oldphoto stringByDeletingLastPathComponent] stringByAppendingPathComponent:lastpathcomponent];
       
        [[NSFileManager defaultManager] removeItemAtPath:newpath error:nil];
        [[NSFileManager defaultManager] moveItemAtPath:oldphoto toPath:newpath error:nil];
        [WowTalkWebServerIF uploadGroupAvatar:newpath forGroup:self.groupid withCallback:@selector(modifyAvatargraph:) withObserver:self];
    }
}

#pragma mark -- navigation bar
-(void)goBack
{
    [self.navigationController popViewControllerAnimated:YES];
}

-(void)editGroup
{
    self.introduction = tf_input.text;
    
    [WTHelper WTLog:@"edit the group"];
    if (avatarChanged) {
        
        NSString* lastpathcomponent = self.groupid;
        NSString* oldThumbnail =  [NSFileManager absolutePathForFileInDocumentFolder:[NSFileManager relativePathToDocumentFolderForFile:@"gthumbnail" WithSubFolder:GROUP_AVATAR_THUMBNAIL_FOLDER]];
        
        NSString* newthumbpath = [[oldThumbnail stringByDeletingLastPathComponent] stringByAppendingPathComponent:lastpathcomponent];
        
        [[NSFileManager defaultManager] removeItemAtPath:newthumbpath error:nil];
        [[NSFileManager defaultManager] moveItemAtPath:oldThumbnail toPath:newthumbpath error:nil];
        
        if ([NSFileManager hasFileAtPath:newthumbpath]) {
            [WowTalkWebServerIF  uploadGroupAvatarThumbnail:newthumbpath forGroup:self.groupid withCallback:@selector(modifyAvatarThumbnail:) withObserver:self];
        }
    }
    else{
        
        [WowTalkWebServerIF editGroup:self.groupid withName:self.groupname withStatus:self.introduction withPlacename:self.place withLongitude:self.longitude withLatitude:self.latitude withBreifIntroduction:self.introduction withGroupType:self.type NeedUpdateTimeStamp:FALSE withCallback:@selector(didEditGroup:) withObserver:self];
    }
}

-(void)didAddMembers:(NSNotification*)notif
{
    NSError* error = [[notif userInfo] valueForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        if (self.arr_decrease != nil && [self.arr_decrease count] > 0) {
            [WowTalkWebServerIF removeMemeber:self.arr_decrease fromGroup:self.groupid withCallback:@selector(didRemoveMember:) withObserver:self];
        }
        else{
            [WowTalkWebServerIF getUserGroupDetail:self.groupid isCreator:TRUE withCallback:@selector(didGetGroupDetail:) withObserver:self];
        }
    }
    
}

-(void)didRemoveMember:(NSNotification*)notif
{
    NSError* error = [[notif userInfo] valueForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        [WowTalkWebServerIF getUserGroupDetail:self.groupid isCreator:YES withCallback:@selector(didGetGroupDetail:) withObserver:self];
    }
}

-(void)didEditGroup:(NSNotification*)notif
{
    NSError* error = [[notif userInfo] valueForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        
        [self getMemberDiff];
        
        if (self.arr_increase != nil && [self.arr_increase count] > 0) {
            [WowTalkWebServerIF groupChat_AddMembers:self.groupid withMembers:self.arr_increase withCallback:@selector(didAddMembers:) withObserver:self];
        }
        else{
            if (self.arr_decrease != nil && [self.arr_decrease count] > 0) {
                [WowTalkWebServerIF removeMemeber:self.arr_decrease fromGroup:self.groupid withCallback:@selector(didRemoveMember:) withObserver:self];
            }
            else{
                [WowTalkWebServerIF getUserGroupDetail:self.groupid isCreator:TRUE withCallback:@selector(didGetGroupDetail:) withObserver:self];  // actually the creator should change to admin
            }
        }
    }
}

-(void)getMemberDiff
{
    for (GroupMember* member in self.memberlist) {
        for (GroupMember* oldmember in self.group.memberList) {
            if ([member.userID isEqualToString:oldmember.userID]) {
                
            }
        }
    }
    
}


-(void)didGetGroupDetail:(NSNotification*)notif
{
    NSError* error = [[notif userInfo] valueForKey:WT_ERROR];
    if (error.code == NO_ERROR) {
        [self goBack];
    }
}

-(void)configNav
{
    
    UILabel* label = [[[UILabel alloc] init] autorelease];
    label.text =  NSLocalizedString(@"Edit group",nil);
    label.font = [UIFont fontWithName:@"Helvetica-Bold" size:20];
    label.textAlignment = NSTextAlignmentCenter;
    label.textColor = [UIColor whiteColor];
    label.backgroundColor = [UIColor clearColor];
    [label sizeToFit];
    self.navigationItem.titleView = label;
    
    UIBarButtonItem *barButton = [PublicFunctions getCustomNavButtonOnLeftSide:YES target:self image:[UIImage imageNamed:NAV_BACK_IMAGE] selector:@selector(goBack)];
      [self.navigationItem addLeftBarButtonItem:barButton];
    [barButton release];
    
//    UIBarButtonItem *rightBarButton = [PublicFunctions getCustomNavButtonOnLeftSide:NO target:self image:[UIImage imageNamed:NAV_CONFIRM_IMAGE] selector:@selector(editGroup)];
    UIBarButtonItem *rightBarButton = [PublicFunctions getCustomNavDoneButtonWithTarget:self selector:@selector(editGroup)];
       [self.navigationItem addRightBarButtonItem:rightBarButton];
    [rightBarButton release];
    
}

#pragma mark -
#pragma mark --View lifecycle

-(void)generateInitialData
{
    self.groupname = self.group.groupNameLocal;
    self.type = self.group.groupType;
    self.place = self.group.createdPlace;
    self.introduction = self.group.introduction;
    self.memberlist = [NSMutableArray arrayWithArray:self.group.memberList];
    self.groupid = self.group.groupID;
    self.imagepath = [NSFileManager absolutePathForFileInDocumentFolder:[NSFileManager relativePathToDocumentFolderForFile:self.groupid WithSubFolder:GROUP_AVATAR_THUMBNAIL_FOLDER]];
    
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

-(void)authorize
{
    //  self.isStanger = TRUE;
    
    NSString* uid = [WTUserDefaults getUid];
    for (GroupMember* member in self.group.memberList) {
        if ([member.userID isEqualToString:uid]) {
            self.isCreator = member.isCreator;
            self.isManager = member.isManager;
            self.isStanger = FALSE;
        }
    }
    
    if (!self.isStanger && !self.isCreator && !self.isManager) {
        self.isNormalMember = TRUE;
    }
    
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    self.view.backgroundColor = [UIColor colorWithHexString:SETTING_BACKGROUND_COLOR];
    
    [self authorize];
    
    [self configNav];
    [self generateInitialData];

    if (self.arr_decrease == nil) {
        self.arr_decrease = [[[NSMutableArray alloc] init] autorelease];
    }
    if (self.arr_increase == nil ) {
        self.arr_increase = [[[NSMutableArray alloc] init] autorelease];
    }
    
    self.tb_group.scrollEnabled = TRUE;
    [self.tb_group setBackgroundView:nil];
    self.tb_group.backgroundColor = [UIColor colorWithHexString:SETTING_BACKGROUND_COLOR];
    [self.tb_group setSeparatorStyle:UITableViewCellSeparatorStyleNone];
    
    
    tf_input = [[UIPlaceHolderTextView alloc] initWithFrame:CGRectMake(10, 5, 270, 80)];
    if (_group.introduction == nil || [_group.introduction isEqualToString:@""]) {
        tf_input.placeholder = NSLocalizedString(@"Please write group introduction", nil);
    } else {
        tf_input.text = _group.introduction;
    }
    [tf_input setTextColor:[UIColor blackColor]];
    [tf_input setBackgroundColor:[UIColor clearColor]];
    tf_input.font = [UIFont systemFontOfSize:15];
    
    tf_input.delegate = self;
    
    if (IS_IOS7) {
        [self.view setAutoresizesSubviews:false];
        [self setAutomaticallyAdjustsScrollViewInsets:false];
        [self setEdgesForExtendedLayout:UIRectEdgeNone];
    }
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)viewWillAppear:(BOOL)animated
{
    
    // register for keyboard notifications
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillShow:)
                                                 name:UIKeyboardWillShowNotification
                                               object:self.view.window];
    // register for keyboard notifications
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillHide:)
                                                 name:UIKeyboardWillHideNotification
                                               object:self.view.window];
    
}

-(void)viewWillDisappear:(BOOL)animated
{
    // unregister for keyboard notifications while not visible.
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:UIKeyboardWillShowNotification
                                                  object:nil];
    // unregister for keyboard notifications while not visible.
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:UIKeyboardWillHideNotification
                                                  object:nil];
    
}

#pragma mark -- keyboard notification
#pragma mark - keyboard not blocking the textfield.
-(void) keyboardWillShow:(NSNotification *)n
{
    if (keyboardIsShown == NO)
    {
          oldOffset_height = self.tb_group.contentOffset.y;
        
        tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(dismissKeyboard)];
        tap.delegate = self;
        [self.tb_group addGestureRecognizer:tap];
        tap.cancelsTouchesInView = TRUE;
        [tap release];

        
        keyboardIsShown = YES;
        
        NSDictionary* keyboardInfo = [n userInfo];
        NSValue* keyboardFrameBegin = [keyboardInfo valueForKey:UIKeyboardFrameBeginUserInfoKey];
        CGRect keyboardFrameBeginRect = [keyboardFrameBegin CGRectValue];
        
        int height = keyboardFrameBeginRect.size.height;
        
        [self.tb_group setContentOffset:CGPointMake(0, height+60) animated:TRUE];

    }
}
- (void)keyboardWillHide:(NSNotification *)n
{
    
    [self.tb_group setContentOffset:CGPointMake(0, oldOffset_height) animated:TRUE];
    keyboardIsShown = NO;
}

-(void)dismissKeyboard
{
    [tf_input resignFirstResponder];
    if ([self.tb_group.gestureRecognizers containsObject:tap]) {
        [self.tb_group removeGestureRecognizer:tap];
    }
   
    
}

@end
